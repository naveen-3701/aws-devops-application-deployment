#!/bin/bash

# Monitoring Setup Script
# This script sets up monitoring for the DevOps application

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_status "Monitoring Setup Instructions for DevOps Application"
echo ""
print_status "=== MONITORING OPTIONS ==="
echo ""
print_status "1. Prometheus + Grafana (Recommended)"
print_status "2. Uptime Robot (Cloud-based)"
print_status "3. Custom Health Check Script"
print_status "4. AWS CloudWatch (AWS native)"
echo ""
print_status "=== OPTION 1: PROMETHEUS + GRAFANA ==="
echo ""
print_status "1. Install Docker Compose on your monitoring server:"
print_status "   sudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-\$(uname -s)-\$(uname -m)\" -o /usr/local/bin/docker-compose"
print_status "   sudo chmod +x /usr/local/bin/docker-compose"
echo ""
print_status "2. Create monitoring directory:"
print_status "   mkdir -p ~/monitoring"
print_status "   cd ~/monitoring"
echo ""
print_status "3. Create docker-compose.yml for monitoring:"
print_status "   # See monitoring/docker-compose.yml in the repository"
echo ""
print_status "4. Start monitoring stack:"
print_status "   docker-compose up -d"
echo ""
print_status "5. Access monitoring:"
print_status "   - Prometheus: http://your-server:9090"
print_status "   - Grafana: http://your-server:3000 (admin/admin123)"
echo ""
print_status "=== OPTION 2: UPTIME ROBOT ==="
echo ""
print_status "1. Go to https://uptimerobot.com/"
print_status "2. Create free account"
print_status "3. Add new monitor:"
print_status "   - Monitor Type: HTTP(s)"
print_status "   - Friendly Name: DevOps Application"
print_status "   - URL: http://your-ec2-ip"
print_status "   - Monitoring Interval: 5 minutes"
print_status "   - Monitor Timeout: 30 seconds"
print_status "4. Configure notifications:"
print_status "   - Email alerts"
print_status "   - SMS alerts (paid)"
print_status "   - Webhook notifications"
echo ""
print_status "=== OPTION 3: CUSTOM HEALTH CHECK SCRIPT ==="
echo ""
print_status "Create a simple health check script:"
print_status "   #!/bin/bash"
print_status "   # health-check.sh"
print_status "   "
print_status "   APP_URL=\"http://your-ec2-ip\""
print_status "   EMAIL=\"your-email@example.com\""
print_status "   "
print_status "   if ! curl -f -s \$APP_URL/health > /dev/null; then"
print_status "       echo \"Application is down!\" | mail -s \"Alert: DevOps App Down\" \$EMAIL"
print_status "   fi"
echo ""
print_status "Set up cron job:"
print_status "   crontab -e"
print_status "   # Add: */5 * * * * /path/to/health-check.sh"
echo ""
print_status "=== OPTION 4: AWS CLOUDWATCH ==="
echo ""
print_status "1. Create CloudWatch alarm:"
print_status "   - Go to AWS CloudWatch console"
print_status "   - Create alarm for EC2 instance"
print_status "   - Monitor CPU, Memory, Disk usage"
print_status "   - Set up SNS notifications"
echo ""
print_status "2. Custom metrics:"
print_status "   - Use AWS CLI to send custom metrics"
print_status "   - Monitor application-specific metrics"
print_status "   - Set up dashboards"
echo ""
print_status "=== RECOMMENDED MONITORING SETUP ==="
echo ""
print_status "For this project, we recommend:"
print_status "1. Uptime Robot for external monitoring"
print_status "2. Custom health check script for detailed monitoring"
print_status "3. Docker logs monitoring on EC2"
echo ""
print_status "=== HEALTH CHECK ENDPOINTS ==="
echo ""
print_status "The application provides these endpoints:"
print_status "  - http://your-ec2-ip/          # Main application"
print_status "  - http://your-ec2-ip/health    # Health check endpoint"
print_status "  - http://your-ec2-ip/robots.txt # Basic connectivity test"
echo ""
print_status "=== NOTIFICATION SETUP ==="
echo ""
print_status "1. Email notifications:"
print_status "   - Configure SMTP settings"
print_status "   - Set up email alerts for downtime"
print_status "   - Include relevant details in alerts"
echo ""
print_status "2. Slack notifications (optional):"
print_status "   - Create Slack webhook"
print_status "   - Send alerts to Slack channel"
print_status "   - Include deployment status updates"
echo ""
print_status "3. SMS notifications (paid services):"
print_status "   - Twilio integration"
print_status "   - AWS SNS SMS"
print_status "   - Critical alerts only"
echo ""
print_status "=== MONITORING DASHBOARD ==="
echo ""
print_status "Create a simple monitoring dashboard:"
print_status "1. Application status"
print_status "2. Response time metrics"
print_status "3. Error rates"
print_status "4. Deployment history"
print_status "5. System resources"
echo ""
print_status "=== ALERTING RULES ==="
echo ""
print_status "Set up alerts for:"
print_status "  - Application downtime (> 1 minute)"
print_status "  - High response time (> 5 seconds)"
print_status "  - High error rate (> 5%)"
print_status "  - System resource issues"
print_status "  - Deployment failures"
echo ""
print_success "Monitoring setup instructions completed!"
print_status "Choose the monitoring option that best fits your needs"
